#!/usr/bin/env ruby

require "rubygems"
require "bundler"

Bundler.require :runtime

require 'ostruct'

module Patches
	refine String do
		def strftime
			DateTime.iso8601(self).strftime('%H:%M')
		end

		def subzh
			gsub('ZÃ¼rich', 'Zh').
					gsub('Bahnhof', 'Bhf')
		end

		def subcon
			tokens = split(' ')
			tokens[0][-1] + ' ' + tokens[1]
		end
	end

	refine Hash do
		def to_ostruct
			OpenStruct.new(self).tap do |o|
				each.with_object(o) do |(k,v), o|
					o.send(:"#{k}=", v.to_ostruct) if v.respond_to? :to_ostruct
				end
			end
		end
	end

	refine Array do
		def to_ostruct
			map { |_| _.to_ostruct rescue _ }
		end
	end
end

# TODO
# one command
# departure & arrival time
# autocomplete
# zone info (if not 110)
#

class App
	using Patches
	include Commander::Methods

	def run
		program :name, 'ZVV CLI'
		program :description, 'ZVV and Swiss Open Data public transport utility'
		program :version, Zvv::Cli::VERSION

		command :connection do |c|
			c.syntax = 'from to'
			c.description = 'Find connection between two destinations'
			c.action do |args, options|
				raise 'Expected two locations' unless args.size == 2

				connections = Transprt.connections(from: args.first, to: args.last).to_ostruct
				connections.each_with_index do |c, i|
					#byebug
					puts ("%s %s ---> %s %s" % [c.from.station.name, c.from.departure.strftime, c.to.station.name, c.to.arrival.strftime]).subzh
					c.sections.each do |s|
						if s.walk
							puts ("Walk (%s) to %s" % [s.walk.duration, s.departure.station.name]).subzh.light_black
						else
							#puts s.inspect
							puts ("%s %s -- %s --> %s %s" % [s.departure.station.name, s.departure.departure.strftime, s.journey.name.subcon, s.arrival.station.name, s.arrival.arrival.strftime]).subzh.light_black
						end
					end
					puts unless i == connections.length - 1
				end
			end
		end

		alias_command :c, :connection

		run!
	end
end

App.new.run